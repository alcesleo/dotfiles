snippet def
def ${1:method_name}(${2:args})
  ${3:fail NotImplementedError}$0
end
endsnippet

snippet defs
def self.${1:class_method_name}(${2:args})
  ${3:fail NotImplementedError}$0
end
endsnippet

snippet do
do |${1:args}|
  $0
end
endsnippet

snippet {
{ |${1:args}|
endsnippet

snippet @
@${1:instance_var} = $1
endsnippet

snippet defi
attr_reader :${1/\w+, /$0:/g}

def initialize($1)`!p
snip.shift();
for m in re.findall(r"\w+", t[1]):
    snip.rv += snip.mkline("\n")
    snip.rv += snip.mkline("@{0} = {0}".format(m))`
end
endsnippet

snippet aa
attr_accessor :${1:instance_variable}
endsnippet

snippet ar
attr_reader :${1:instance_variable}
endsnippet

snippet aw
attr_writer :${1:instance_variable}
endsnippet

snippet alias "Lexical aliasing"
alias ${1:new} ${2:old}
endsnippet

snippet alias_method "Dynamic aliasing"
alias_method :${1:new}, :${2:old}
endsnippet

snippet class
class ${1:`!p snip.rv = "".join(map(lambda s:s.capitalize(), fn[:-3].split("_")))`}$0
  ${VISUAL:# ...}
end
endsnippet

snippet module
module ${1:`!p snip.rv = "".join(map(lambda s:s.capitalize(), path.split("/")[-2].split("_")))`}$0
  ${VISUAL:# ...}
end
endsnippet

snippet source
source "https://rubygems.org"
endsnippet

snippet rr "require_relative"
require_relative "$1"
endsnippet

snippet pry "Start pry here"
require "pry"; binding.pry
endsnippet

snippet bye "Start byebug here"
require "byebug"; byebug
endsnippet

snippet deb "Start ruby-debug here"
require "ruby-debug"; debugger
endsnippet

### Testing ###

snippet desc
describe "${1:feature}" do
  $0
end
endsnippet

snippet descf
describe `!p snip.rv = "".join(map(lambda s:s.capitalize(), fn[:-8].split("_")))` do
  $0
end
endsnippet

snippet rdesc "Insert require and describe based on path"
require "./`!p snip.rv = re.match(r"spec/(.*)_spec.rb", path).group(1)`"

describe `!p snip.rv = "".join(map(lambda s:s.capitalize(), fn[:-8].split("_")))` do
  $0
end
endsnippet

snippet it
it "${1:does something}" do
  $0
end
endsnippet

snippet let
let(:${1:var}) { ${2:double} }
endsnippet

snippet exp
expect(${1:${VISUAL:subject}}).${2:to} ${3:eq} ${4:expectation}
endsnippet

snippet subj
subject { ${1:described_class.new}$2 }
endsnippet

snippet rtask "Run rspec as default rake task"
require "rspec/core/rake_task"
RSpec::Core::RakeTask.new(:spec)
task :default => :spec
endsnippet

snippet mini "MiniTest single file stub"
class ${1:ClassName}
end

require "minitest/spec"
require "minitest/autorun"

describe $1 do
  it "${2:does something}" do
    $0
  end
end
endsnippet
